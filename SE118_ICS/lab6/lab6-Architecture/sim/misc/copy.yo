                            | # /* copy_block - Copy src to dest and return xor checksum of src */
                            | # long copy_block(long *src, long *dest, long len)
                            | # {
                            | #     long result = 0;
                            | #     while (len > 0) {
                            | # 	long val = *src++;
                            | # 	*dest++ = val;
                            | # 	result ^= val;
                            | # 	len--;
                            | #     }
                            | #     return result;
                            | # }
                            | 
                            | 
                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 
                            | # 内存区域，存放数据/链表之类
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | # END
                            | 
0x048:                      | main:	
0x048: 30f71800000000000000 | 	irmovq src, %rdi   # prepare parameter
0x052: 30f63000000000000000 |   irmovq dest,%rsi  
0x05c: 30f20300000000000000 |   irmovq $3,  %rdx  
0x066: 807000000000000000   | 	call   copy_block		# long copy_block(long *src, long *dest, long len)
0x06f: 90                   | 	ret
                            | 
0x070:                      | copy_block:
0x070: a0cf                 |   pushq %r12
0x072: a0df                 |   pushq %r13
0x074: a0ef                 |   pushq %r14
0x076: 6300                 |   xorq  %rax, %rax
0x078: 30fe0800000000000000 |   irmovq $8, %r14
0x082: 30fd0100000000000000 |   irmovq $1, %r13
0x08c: 70b100000000000000   |   jmp   test
0x095:                      | loop:
0x095: 50c70000000000000000 |   mrmovq 0(%rdi), %r12  # long val = *src;
0x09f: 60e7                 |   addq   %r14, %rdi     # src++;
0x0a1: 40c60000000000000000 |   rmmovq %r12, 0(%rsi)
0x0ab: 60e6                 |   addq   %r14, %rsi     # dest++;
0x0ad: 63c0                 |   xorq   %r12, %rax     # result ^= val;
0x0af: 61d2                 |   subq   %r13, %rdx     # len--;
0x0b1:                      | test:
0x0b1: 6222                 |   andq  %rdx, %rdx   # Set cc according to the ls(in %rdx)
0x0b3: 749500000000000000   |   jne  loop
0x0bc: b0ef                 |   popq %r14
0x0be: b0df                 |   popq %r13
0x0c0: b0cf                 |   popq %r12
0x0c2: 90                   |   ret
                            | 
                            | 
                            | 
                            |   # Stack starts here and grows to lower addresses
0x200:                      |   .pos 0x200
0x200:                      | stack:
